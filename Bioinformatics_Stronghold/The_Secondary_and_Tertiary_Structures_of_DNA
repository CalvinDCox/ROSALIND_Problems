#The Secondary and Tertiary Structures of DNA
#Calvin D. Cox
#10/14/17

#Given: A DNA string ss of length at most 1000 bp.
#Return: The reverse complement scsc of ss.

#Pull data from text: (later, gonna pull it as raw rn)
#with open('rosalind_rna.txt','r') as file:
#    dna = file.readline()
dna = 'TGTCGCGAACCGGCCGTCAAAAATGGAACTTGATGATCTTCCCTCGTGACTAAATCGGTGATGCCCTGTTCTCTCCGGGCGCACAGCTGACCTGTTATGGCACGTTACCACCTCACCGCGTGCGCTGAGCTTAGCGGCATCAGACTGGTGGGATTCCTTGGAACCTTCTAATATCGAAGCTGCCCCCACCTTACCTCACGCTATGCCTGACGCAGAGCATGATCTATTACGTAATGGCTGTTCTGAGCCCAGCAAGATTGAACAGTCTGCCGCCGACTATTATTATGTCCATTGGCTGTCTGGACCAACTCCGTAGTCGGTGTATATACATACTACGCAGCACCTCGCTATCCAGGTGGACAACACGTAGCCGCTCCACGTGGTAGCGCCTCGGATATAGGCAATATAGATCCGTTGGTATAATGCTTGGAGCCGGCCATTGCGTTAAGGACGTCGCCTCTATCCTCGCAACCAGTAGAGATCACGAAGGTTTACTTAGTGTAACCTTGCGGCCAAGCGTATTCTCCGGCGAATCCATGCAGAATCTCGAAGTAAGGTGAGCGCTTGTGTCTTTGGAGGTGAGCGTTCTGCCGCAATCTGGGCGGCTCCGTCTCACCGAGCTAGACATAACAACTTAGCGAGTGTTAAAAACCATGATCAGATCATATGTTGGAAATGCGCCAACCAACTTGTGGGGTAAGCAGAGAAACAGTACAGTAGTGGAAACGAGAGCAAGTGCAAGGTACGACTCACAGGTGAATGCGCCTAGTCGTACACTTCGAGGTGTATTTTCCGGTGGAATGGAACAGTGGCCTCGCC'

#"dna" should now be a string that contains our sequence, and that also makes it a series.
#We can define a formula to decide what letter everything should be.
def transcribe(nuc):
    if nuc == 'A':
        return 'T'
    elif nuc == 'C':
        return 'G'
    elif nuc == 'G':
        return 'C'
    elif nuc == 'T':
        return 'A'

#create bin for result 
rna = ''

for i in dna:
  rna = rna + transcribe(i)

#prints reverse of rna, which is actually just the complementary dna strand in this case
print(rna[::-1])
 
 
